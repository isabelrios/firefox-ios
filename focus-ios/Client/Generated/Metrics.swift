// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import MozillaAppServices

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    enum Search {
        private static let countsLabel = CounterMetricType(
            category: "search",
            name: "counts",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// The labels for this counter are `{search-engine-name}.{source}`
        /// 
        /// If the search engine is bundled with Firefox-iOS, then
        /// `search-engine-name` will be the name of the search engine. If
        /// it is a custom search engine, the value will be `custom`.
        /// 
        /// The value of `source` will reflect the source from which the
        /// search started.  One of:
        /// * quicksearch
        /// * suggestion
        /// * actionbar
        static let counts = try! LabeledMetricType<CounterMetricType>(
            category: "search",
            name: "counts",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: countsLabel,
            labels: nil
        )

        /// The default search engine identifier if the search engine is
        /// pre-loaded with Firefox-iOS.  If it's a custom search engine,
        /// then the value will be 'custom'.
        static let defaultEngine = StringMetricType(
            category: "search",
            name: "default_engine",
            sendInPings: ["metrics"],
            lifetime: .application,
            disabled: false
        )

        /// Counts the number of times the start search button is
        /// pressed
        static let startSearchPressed = CounterMetricType(
            category: "search",
            name: "start_search_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum Preferences {
        enum ChangedKeys: Int32, ExtraKeys {
            case changedTo = 0
            case preference = 1

            public func index() -> Int32 {
                return self.rawValue
            }
        }

        /// Recorded when a preference is changed and includes the
        /// preference that changed as well as the value changed to
        /// recorded in the extra keys.
        static let changed = EventMetricType<ChangedKeys>(
            category: "preferences",
            name: "changed",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: false,
            allowedExtraKeys: ["changed_to", "preference"]
        )

        /// The name of the view that the user wants to see on new tabs.
        /// For example History, Homepage or Blank. It is used to measure
        /// usage of this feature, to see how effective feature promotion
        /// campaigns are and to establish a baseline number for when we
        /// introduce the new Activity Stream features.
        static let newTabExperience = StringMetricType(
            category: "preferences",
            name: "new_tab_experience",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// The URL scheme of the mail client that the user wants to use
        /// for `mailto:` links. It is used to measure usage of this
        /// feature, to see how effective feature promotion campaigns are
        /// and to report back to third-party mail clients what percentage
        /// of users is using their client.
        static let mailClient = StringMetricType(
            category: "preferences",
            name: "mail_client",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the "Block Popups" preference.
        static let blockPopups = BooleanMetricType(
            category: "preferences",
            name: "block_popups",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the "Save Logins" preference.
        static let saveLogins = BooleanMetricType(
            category: "preferences",
            name: "save_logins",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the "Show Clipboard Bar" preference.
        static let showClipboardBar = BooleanMetricType(
            category: "preferences",
            name: "show_clipboard_bar",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the "Close Private Tabs" preference.
        static let closePrivateTabs = BooleanMetricType(
            category: "preferences",
            name: "close_private_tabs",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum ApplicationServices {
        /// Measures the state of the show Pocket stories preference.
        static let pocketStoriesVisible = BooleanMetricType(
            category: "application_services",
            name: "pocket_stories_visible",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the show bookmark highlights
        /// preference.
        static let bookmarkHighlightsVisible = BooleanMetricType(
            category: "application_services",
            name: "bookmark_highlights_visible",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the show recent highlights
        /// preference.
        static let recentHighlightsVisible = BooleanMetricType(
            category: "application_services",
            name: "recent_highlights_visible",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum TrackingProtection {
        /// Measures the state of the tracking-protection enabled
        /// preference.
        static let enabled = BooleanMetricType(
            category: "tracking_protection",
            name: "enabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// A string representing the selected strength of the
        /// tracking-protection that is enabled. One of:
        /// * basic
        /// * strict
        static let strength = StringMetricType(
            category: "tracking_protection",
            name: "strength",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum Theme {
        /// Measures the state of the "Use System Light/Dark Mode"
        /// theme preference.
        static let useSystemTheme = BooleanMetricType(
            category: "theme",
            name: "use_system_theme",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the state of the "Manual/Automatic" theme
        /// preference.
        static let automaticMode = BooleanMetricType(
            category: "theme",
            name: "automatic_mode",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the string representation of the current slider
        /// value of the automatic theme switching slider.
        static let automaticSliderValue = StringMetricType(
            category: "theme",
            name: "automatic_slider_value",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Measures the name of the current theme.  One of:
        /// * normal
        /// * dark
        static let name = StringMetricType(
            category: "theme",
            name: "name",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum Tabs {
        /// Measures the current open tab count as the application
        /// goes to background. Each background event adds to this
        /// metric, making it the cumulative sum of all open tabs
        /// when the app goes to background. This can be divided by
        /// the number of baseline pings to determine the average
        /// open tab count.
        static let cumulativeCount = CounterMetricType(
            category: "tabs",
            name: "cumulative_count",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        private static let openLabel = CounterMetricType(
            category: "tabs",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// The count of tabs opened by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is opened.
        static let open = try! LabeledMetricType<CounterMetricType>(
            category: "tabs",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: openLabel,
            labels: ["normal-tab", "private-tab"]
        )

        private static let closeLabel = CounterMetricType(
            category: "tabs",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// The count of tabs closed by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is closed.
        static let close = try! LabeledMetricType<CounterMetricType>(
            category: "tabs",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: closeLabel,
            labels: ["normal-tab", "private-tab"]
        )

        /// Counts the number of times the add new tab button is
        /// pressed
        static let newTabPressed = CounterMetricType(
            category: "tabs",
            name: "new_tab_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum Bookmarks {
        private static let viewListLabel = CounterMetricType(
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times the bookmarks list is opened
        /// from either the Home Panel tab button or the App Menu.
        static let viewList = try! LabeledMetricType<CounterMetricType>(
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: viewListLabel,
            labels: ["app-menu", "home-panel"]
        )

        private static let addLabel = CounterMetricType(
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times a bookmark is added from the
        /// following:
        /// * Page Action Menu
        /// * Share Menu
        /// * Activity Stream context menu
        static let add = try! LabeledMetricType<CounterMetricType>(
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: addLabel,
            labels: ["activity-stream", "page-action-menu", "share-menu"]
        )

        private static let deleteLabel = CounterMetricType(
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times a bookmark is deleted from
        /// the following:
        /// * Page Action Menu
        /// * Activity Stream
        /// * Bookmarks Panel
        static let delete = try! LabeledMetricType<CounterMetricType>(
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: deleteLabel,
            labels: ["activity-stream", "bookmarks-panel", "page-action-menu"]
        )

        private static let openLabel = CounterMetricType(
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times a bookmark is opened from
        /// the following:
        /// * Awesomebar results
        /// * Bookmarks Panel
        static let open = try! LabeledMetricType<CounterMetricType>(
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: openLabel,
            labels: ["awesomebar-results", "bookmarks-panel"]
        )

    }

    enum ReaderMode {
        /// Counts how many times the reader mode is opened.
        static let open = CounterMetricType(
            category: "reader_mode",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts how many times the reader mode is closed.
        static let close = CounterMetricType(
            category: "reader_mode",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum ReadingList {
        private static let addLabel = CounterMetricType(
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times an item is added to the reading
        /// list from the following:
        /// * Reader Mode Toolbar
        /// * Share Extension
        /// * Page Action Menu
        static let add = try! LabeledMetricType<CounterMetricType>(
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: addLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "share-extension"]
        )

        /// Counts the number of times an item is opened from the
        /// Reading List
        static let open = CounterMetricType(
            category: "reading_list",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        private static let deleteLabel = CounterMetricType(
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times an item is added to the
        /// reading list from the following:
        /// * Reader Mode Toolbar
        /// * Reading List Panel
        static let delete = try! LabeledMetricType<CounterMetricType>(
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: deleteLabel,
            labels: ["reader-mode-toolbar", "reading-list-panel"]
        )

        /// Counts the number of times a reading list item is
        /// marked as read.
        static let markRead = CounterMetricType(
            category: "reading_list",
            name: "mark_read",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times a reading list item is
        /// marked as unread.
        static let markUnread = CounterMetricType(
            category: "reading_list",
            name: "mark_unread",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum SettingsMenu {
        /// Counts the number of times setting as default
        /// browser menu option is tapped.
        static let setAsDefaultBrowserPressed = CounterMetricType(
            category: "settings_menu",
            name: "set_as_default_browser_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum QrCode {
        /// Counts the number of times a QR code is scanned.
        static let scanned = CounterMetricType(
            category: "qr_code",
            name: "scanned",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum DefaultBrowserCard {
        /// Counts the number of times default browser card is dismissed.
        static let dismissPressed = CounterMetricType(
            category: "default_browser_card",
            name: "dismiss_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser card is clicked.
        static let goToSettingsPressed = CounterMetricType(
            category: "default_browser_card",
            name: "go_to_settings_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum App {
        /// Recorded when a preference is changed and includes the
        /// preference that changed as well as the value changed to
        /// recorded in the extra keys.
        static let openedAsDefaultBrowser = CounterMetricType(
            category: "app",
            name: "opened_as_default_browser",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType(
            category: "legacy.ids",
            name: "client_id",
            sendInPings: ["deletion_request"],
            lifetime: .user,
            disabled: false
        )

    }

}
