/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// If this is http or https content, and not an index page, then try to run Readability. If anything
// fails, the app will never be notified and we don't show the button. That is ok for now since there
// is no error feedback possible anyway.

var mozReadabilityResult;

function mozCheckReadability() {
    if ((document.location.protocol === "http:" || document.location.protocol === "https:") && document.location.pathname !== "/") {
        // Short circuit in case we already ran Readability. This mostly happens when going
        // back/forward: the page will be cached and the result will still be there.
        if (mozReadabilityResult && mozReadabilityResult.content) {
            webkit.messageHandlers.readerModeMessageHandler.postMessage("Available");
        } else {
            var uri = {
            spec: document.location.href,
            host: document.location.host,
            prePath: document.location.protocol + "//" + document.location.host, // TODO This is incomplete, needs username/password and port
            scheme: document.location.protocol,
            pathBase: document.location.protocol + "//" + document.location.host + location.pathname.substr(0, location.pathname.lastIndexOf("/") + 1)
            }
            console.log(uri);
            var mozReadability = new Readability(uri, document.cloneNode(true));
            mozReadabilityResult = mozReadability.parse();
            webkit.messageHandlers.readerModeMessageHandler.postMessage(mozReadabilityResult !== null ? "Available" : "Unavailable");
        }
    } else if (document.location.protocol === "about:" && document.location.pathname === "reader") {
        webkit.messageHandlers.readerModeMessageHandler.postMessage("Active");
    } else {
        webkit.messageHandlers.readerModeMessageHandler.postMessage("Unavailable");
    }
}

function mozReaderize() {
    if (mozReadabilityResult) {
        var template = mozReaderModeTemplate();
        template = template.replace("%READER-DOMAIN%", mozReadabilityResult.uri.host);
        template = template.replace("%READER-CONTENT%", mozReadabilityResult.content);
        template = template.replace("%READER-TITLE%", mozReadabilityResult.title);
        template = template.replace("%READER-MESSAGE%", mozReadabilityResult.title);
        return template;
    } else {
        return "<p>This should not happen</p>";
    }
}

// This is inline here because I don't have a good answer just yet about loading non-js content into
// the sandboxed javascript world. This is far from ideal but will be addressed in a next iteration.

function mozReaderModeTemplate() {
    var s = "";
    return window.atob(s);
}

mozCheckReadability();
